/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.sub.order;

import entities.Category;
import entities.Product;
import entities.Product_Order;
import entities.Table;
import entities.TableStatus;
import service.product.ProductService;
import service.product.ProductServiceImpl;
import service.product_order.ProductOrderService;
import util.ImageUtils;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import render.comboboxbutton.category.ButtonRender;
import service.category.CategoryService;
import service.category.CategoryServiceImpl;
import service.product_order.ProductOrderServiceImpl;
import util.URL_Factory;

/**
 *
 * @author Admin
 */
public class AddMealDialog extends javax.swing.JDialog {

    /**
     * Creates new form AddMealDialog
     */
    private final CardLayout cardLayout;

    //Amount of SubAddMealPanel in pnProduct
    private int currentAmount = 0;
    //index of showing SubAddMealPanel 
    private int currentIndex = 1;
    private Component[] buttons;
    private final ProductService productService;
    private final CategoryService categoryService;
    private final ProductOrderService productOrderService;
    private final List<Product> products;
    private final ButtonGroup btGroup = new ButtonGroup();
    private final Table table;
    private final List<Category> categorys;
    private final List<Product_Order> product_Orders;

    public AddMealDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        productOrderService = new ProductOrderServiceImpl();
        this.table = null;
        product_Orders = productOrderService.getAll(table.getId());
        productService = new ProductServiceImpl();
        categoryService = new CategoryServiceImpl();
        products = productService.getAll();
        categorys = categoryService.getAll();
        initComponents();
        cardLayout = (CardLayout) pnProduct.getLayout();
        buttons = null;
        setComponents();
        setEvent();
    }

    public AddMealDialog(boolean modal, Table table) {
        this.setModal(modal);
      
        productOrderService = new ProductOrderServiceImpl();
        this.table = table;
        product_Orders = productOrderService.getAll(table.getId());
        productService = new ProductServiceImpl();
        categoryService = new CategoryServiceImpl();
        products = productService.getAll();
        categorys = categoryService.getAll();
        initComponents();
        cardLayout = (CardLayout) pnProduct.getLayout();
        buttons = null;
        setComponents();
        setEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMain = new javax.swing.JPanel();
        pnProduct = new javax.swing.JPanel();
        pnBotton = new javax.swing.JPanel();
        pnRight = new javax.swing.JPanel();
        pnRight_Botton = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lbTableName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnInfor = new javax.swing.JPanel();
        pnTop = new javax.swing.JPanel();
        tfSearch = new javax.swing.JTextField();
        kbKind = new javax.swing.JLabel();
        cbKind = new javax.swing.JComboBox<>();
        lbSort = new javax.swing.JLabel();
        cbSort = new javax.swing.JComboBox<>();
        lbSearch = new javax.swing.JLabel();
        btReverse = new javax.swing.JButton();
        btLeft = new javax.swing.JButton();
        btRight = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(56, 180, 123));

        pnProduct.setBackground(new java.awt.Color(255, 255, 255));
        pnProduct.setAutoscrolls(true);
        pnProduct.setLayout(new java.awt.CardLayout());

        pnBotton.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 5));

        pnRight_Botton.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("jButton1");

        jLabel1.setBackground(new java.awt.Color(102, 255, 0));
        jLabel1.setText("jLabel1");
        jLabel1.setOpaque(true);

        jLabel2.setBackground(new java.awt.Color(153, 255, 153));
        jLabel2.setText("jLabel2");
        jLabel2.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(74, 144, 226));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(163, 198, 240));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("2016");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnRight_BottonLayout = new javax.swing.GroupLayout(pnRight_Botton);
        pnRight_Botton.setLayout(pnRight_BottonLayout);
        pnRight_BottonLayout.setHorizontalGroup(
            pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnRight_BottonLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnRight_BottonLayout.setVerticalGroup(
            pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRight_BottonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnRight_BottonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        lbTableName.setFont(new java.awt.Font("Tahoma", 1, 60)); // NOI18N
        lbTableName.setForeground(new java.awt.Color(56, 180, 123));
        lbTableName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTableName.setText("BÃ n 5");
        lbTableName.setOpaque(true);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 0, new java.awt.Color(153, 153, 153)));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setViewportView(null);

        pnInfor.setLayout(new javax.swing.BoxLayout(pnInfor, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(pnInfor);

        javax.swing.GroupLayout pnRightLayout = new javax.swing.GroupLayout(pnRight);
        pnRight.setLayout(pnRightLayout);
        pnRightLayout.setHorizontalGroup(
            pnRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnRight_Botton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbTableName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        pnRightLayout.setVerticalGroup(
            pnRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRightLayout.createSequentialGroup()
                .addComponent(lbTableName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnRight_Botton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tfSearch.setFont(new java.awt.Font("Tahoma", 2, 19)); // NOI18N
        tfSearch.setForeground(new java.awt.Color(153, 153, 153));
        tfSearch.setText("Nháº­p vÃ o tÃªn cáº§n tÃ¬m kiáº¿m");

        kbKind.setFont(new java.awt.Font("Tahoma", 1, 26)); // NOI18N
        kbKind.setText("Loáº¡i :");

        cbKind.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbSort.setFont(new java.awt.Font("Tahoma", 1, 26)); // NOI18N
        lbSort.setText("Sáº¯p Xáº¿p :");

        cbSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btReverse.setFocusPainted(false);

        javax.swing.GroupLayout pnTopLayout = new javax.swing.GroupLayout(pnTop);
        pnTop.setLayout(pnTopLayout);
        pnTopLayout.setHorizontalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(kbKind)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbKind, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbSort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btReverse, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(lbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnTopLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btReverse, lbSearch});

        pnTopLayout.setVerticalGroup(
            pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbSort, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnTopLayout.createSequentialGroup()
                        .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(kbKind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbKind)
                                .addComponent(lbSort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfSearch, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                            .addComponent(btReverse, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnTopLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btReverse, lbSearch});

        btLeft.setBackground(new java.awt.Color(255, 255, 255));
        btLeft.setBorderPainted(false);
        btLeft.setFocusPainted(false);

        btRight.setBackground(new java.awt.Color(255, 255, 255));
        btRight.setBorderPainted(false);
        btRight.setFocusPainted(false);

        javax.swing.GroupLayout pnMainLayout = new javax.swing.GroupLayout(pnMain);
        pnMain.setLayout(pnMainLayout);
        pnMainLayout.setHorizontalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnBotton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnMainLayout.createSequentialGroup()
                        .addComponent(btLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnTop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btRight, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btLeft, btRight});

        pnMainLayout.setVerticalGroup(
            pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnMainLayout.createSequentialGroup()
                        .addComponent(pnTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(297, 297, 297)
                                .addComponent(btLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(pnProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnMainLayout.createSequentialGroup()
                                .addGap(289, 289, 289)
                                .addComponent(btRight, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnBotton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnMainLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btLeft, btRight});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMealDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMealDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMealDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMealDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddMealDialog dialog = new AddMealDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLeft;
    private javax.swing.JButton btReverse;
    private javax.swing.JButton btRight;
    private javax.swing.JComboBox<String> cbKind;
    private javax.swing.JComboBox<String> cbSort;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel kbKind;
    private javax.swing.JLabel lbSearch;
    private javax.swing.JLabel lbSort;
    private javax.swing.JLabel lbTableName;
    private javax.swing.JPanel pnBotton;
    private javax.swing.JPanel pnInfor;
    private javax.swing.JPanel pnMain;
    private javax.swing.JPanel pnProduct;
    private javax.swing.JPanel pnRight;
    private javax.swing.JPanel pnRight_Botton;
    private javax.swing.JPanel pnTop;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables

    private void setComponents() {

        setIcon();
        setpnInfor();
        List<MealPanel> mealPanels = products.stream()
                .map(MealPanel::new)
                .collect(Collectors.toList());
        addComponentsIn_pnProduct(mealPanels);
        setpnBotton();
        setlbTableName();
        setcbKind();
        setcbSort();
    }

    private void addComponentsIn_pnProduct(List<MealPanel> mealPanels) {

        SubAddMealPanel subAddMealPanel = new SubAddMealPanel();
        currentAmount++;
        JRadioButton radioBt = new JRadioButton();
        int maxComponent = subAddMealPanel.MAX_COMPONENT_AMOUNT;

        if (mealPanels.size() <= maxComponent) {
            subAddMealPanel.addComponens(mealPanels);
            addNewPage(subAddMealPanel, radioBt);
        }
        if (mealPanels.size() > maxComponent) {
            List<MealPanel> addedList = mealPanels.subList((currentAmount - 1) * maxComponent, currentAmount * maxComponent);
            subAddMealPanel.addComponens(addedList);
            addNewPage(subAddMealPanel, radioBt);
            mealPanels.removeAll(addedList);
            addComponentsIn_pnProduct(mealPanels);
        }
        radioBt.addMouseListener(RadioBtEvent(radioBt.getActionCommand()));
        pnProductEvent();
    }

    private MouseListener RadioBtEvent(String actionCommand) {
        return new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                cardLayout.show(pnProduct, actionCommand + "");
                currentIndex = Integer.parseInt(actionCommand);
            }

        };
    }

    private void addNewPage(SubAddMealPanel subAddMealPanel, JRadioButton radioBt) {

        pnProduct.add(subAddMealPanel, (currentAmount) + "");
        radioBt.setText("");
        radioBt.setActionCommand(currentAmount + "");
        btGroup.add(radioBt);
        pnBotton.add(radioBt);

    }

    private void setEvent() {
        btRightEvent();
        btLeftEvent();  
        tfSearchEvent();
        cbKindEvent();
        cbSortEvent();
        btReverseEvent();
        pnInforEvent();
        
    }

    private void btRightEvent() {
        btRight.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (currentIndex != currentAmount) {
                    cardLayout.show(pnProduct, (++currentIndex) + "");
                    for (int i = 0; i < buttons.length; i++) {
                        JRadioButton radioButton = (JRadioButton) buttons[i];
                        if (radioButton.getActionCommand().equals(currentIndex + "")) {
                            radioButton.setSelected(true);
                        }
                    }
                }
            }
        });
    }

    private void btLeftEvent() {
        btLeft.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (currentIndex != 1) {
                    cardLayout.show(pnProduct, (--currentIndex) + "");
                    for (int i = 0; i < buttons.length; i++) {
                        JRadioButton radioButton = (JRadioButton) buttons[i];
                        if (radioButton.getActionCommand().equals(currentIndex + "")) {
                            radioButton.setSelected(true);
                        }
                    }
                }
            }
        });
    }

    private void setpnInfor() {
        
        product_Orders.forEach(t -> pnInfor.add(new InforMealPanel(t)));

    }

    private MouseListener removeListener(Component component) {
        return new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                pnInfor.remove(component);
                pnInfor.validate();
                pnInfor.repaint();
            }
        };
    }

    private void pnInforEvent() {
        Component[] component = pnInfor.getComponents();
        Arrays.stream(component).forEach(t -> {
            InforMealPanel inforMealPanel = (InforMealPanel) t;
            inforMealPanel.getButtonRemove().addMouseListener(removeListener(inforMealPanel));
        });
    }

    private void setIcon() {
        final String imageDirURL = URL_Factory.IMAGE_FOLDER_URL;

        btLeft.setIcon(ImageUtils.loadImage(imageDirURL + "\\left.png"));
        btRight.setIcon(ImageUtils.loadImage(imageDirURL + "\\right.png"));
        lbSearch.setIcon(ImageUtils.loadImage(imageDirURL + "\\search.png"));
        btReverse.setIcon(ImageUtils.loadImage(imageDirURL + "\\reverse.png"));
    }

    private void setpnBotton() {
        buttons = pnBotton.getComponents();

        for (int i = 0; i < buttons.length; i++) {
            JRadioButton radioButton = (JRadioButton) buttons[i];
            if (radioButton.getActionCommand().equals("1")) {
                radioButton.setSelected(true);
            }
        }
    }

    private void pnProductEvent() {
        Component[] componentPanel = pnProduct.getComponents();
        Arrays.stream(componentPanel).forEach(t -> {
            SubAddMealPanel subAddMealPanel = (SubAddMealPanel) t;
            Component[] productPanel = subAddMealPanel.getComponents();
            Arrays.stream(productPanel).forEach(p -> {
                MealPanel mealPanel = (MealPanel) p;
                Product selectedProduct = mealPanel.getProduct();

                mealPanel.getbtMinus().addMouseListener(btMinusEvent(selectedProduct));
                mealPanel.getbtPlus().addMouseListener(btPlusEvent(selectedProduct));
            });

        });
    }

    private MouseListener btPlusEvent(Product selectedProduct) {
        return new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                Component[] components = pnInfor.getComponents();
                Arrays.stream(components).forEach(t -> {
                    InforMealPanel inforMealPanel = (InforMealPanel) t;
                    if (inforMealPanel.getProduct_Order().getProduct().equals(selectedProduct)) {
                        inforMealPanel.setAmount(inforMealPanel.getAmount() + 1);
                        inforMealPanel.setspAmount();
                    }
                });
            }
        };
        
    }

    private MouseListener btMinusEvent(Product selectedProduct) {
        return new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                Component[] components = pnInfor.getComponents();
                Arrays.stream(components).forEach(t -> {
                    InforMealPanel inforMealPanel = (InforMealPanel) t;   
                    if (inforMealPanel.getProduct_Order().getProduct().equals(selectedProduct)) {
                        inforMealPanel.setAmount(inforMealPanel.getAmount() - 1);
                        inforMealPanel.setspAmount();
                    }
                });
            }
        };
    }

    private void setlbTableName() {
        lbTableName.setText(table.getName());
    }

    private void setcbKind() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        Category category = new Category();
        category.setId(0);
        comboBoxModel.addElement(category);
        addElementCBKind(comboBoxModel);
        cbKind.setModel(comboBoxModel);
        cbKind.setRenderer(new ButtonRender());
        cbKind.setFont(new Font("Tahoma", Font.PLAIN, 26));
    }

    private void addElementCBKind(DefaultComboBoxModel comboBoxModel) {
        categorys.forEach(t -> {
            comboBoxModel.addElement(t);
        });
    }

    private void setcbSort() {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        List<String> strings = Arrays.asList("KhÃ´ng", "Theo TÃªn", "Theo GiÃ¡");
        strings.forEach(t -> {
            comboBoxModel.addElement(t);
        });
        cbSort.setModel(comboBoxModel);
        cbSort.setFont(new Font("Tahoma", Font.PLAIN, 26));
        DefaultListCellRenderer listCellRenderer = new DefaultListCellRenderer();
        listCellRenderer.setHorizontalAlignment(DefaultListCellRenderer.CENTER);
        cbSort.setRenderer(listCellRenderer);
    }

    private void tfSearchEvent() {
        tfSearch.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                tfSearch.setText("");
                tfSearch.setForeground(new Color(0, 0, 0));
                Font currentFont = tfSearch.getFont();
                tfSearch.setFont(currentFont.deriveFont(Font.PLAIN));
                tfSearch.setHorizontalAlignment(JTextField.CENTER);
            }

        });
        tfSearch.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    String searchString = tfSearch.getText();
                    String regex = "\\s*";
                    if (!searchString.matches(regex)) {
                        products.clear();
                        products.addAll(productService.getAll(searchString));
                        UpdateComponet_pnProduct();
                    }

                }
            }
        });
        
    }

    private void cbKindEvent() {
        cbKind.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Category category = (Category) cbKind.getSelectedItem();
                products.clear();
                if (category.getId() == 0) {
                    products.addAll(productService.getAll());
                } else {
                    products.addAll(productService.getAll(category.getId()));
                }
                UpdateComponet_pnProduct();
            }
        });
        
    }

    private void UpdateComponet_pnProduct() {
        currentAmount = 0;
        currentIndex = 1;
        pnProduct.removeAll();
        pnBotton.removeAll();
        List<MealPanel> mealPanels = products.stream().map(MealPanel::new).collect(Collectors.toList());
        addComponentsIn_pnProduct(mealPanels);
        pnProduct.revalidate();
        pnProduct.repaint();
        setpnBotton();
        pnBotton.revalidate();
        pnBotton.repaint();
    }

    private void cbSortEvent() {
        cbSort.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String string = (String) cbSort.getSelectedItem();
                if ("Theo TÃªn".equals(string)) {
                    products.sort(Comparator.comparing(Product::getName));
                    UpdateComponet_pnProduct();
                }
                if ("Theo GiÃ¡".equals(string)) {
                    products.sort(Comparator.comparing(Product::getPrice));
                    UpdateComponet_pnProduct();
                }
                if ("KhÃ´ng".equals(string)) {
                    products.clear();
                    products.addAll(productService.getAll());
                    UpdateComponet_pnProduct();
                }
            }
        });
        
    }

    private void btReverseEvent() {
        btReverse.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                Collections.reverse(products);
                UpdateComponet_pnProduct();
            }

        });
    }

}
